package basic_algo;

import java.util.ArrayList;

/**
 * Bucket Sort
 * 
 * Bucket sort (uniform keys) assumes that the input is generated by a random process that distributes elements
 * uniformly and independently over the interval [0, 1).
 * 
 * average: O(n+k)
 * worst: O(n^2+k)
 * memory: worst: O(n*k) 
 * stable: Yes
 */
public class BucketSort {
	
	private static final int NUM_OF_BUCKETS = 10;
	
	/* 
	 * 1) set up an arraylist of initially empty "buckets" (each bucket is an arraylist)
	 * 2) Scatter: go over the original array, putting each object in its bucket
	 * 3) sort each non-empty bucket
	 * 4) Gather: visit the buckets in order and put all elements back into the original array
	 */
	
	/**
	 * assumes input 0 <= arr[i] < 1
	 * 
	 */
	public static void bucketSort(double[] arr){
		
		ArrayList<ArrayList<Double>> buckets = new ArrayList<ArrayList<Double>>();

		// create 10 empty buckets
		for (int i = 0; i < NUM_OF_BUCKETS; i++){
			buckets.add(null);
		}
		
		// insert arr[i] into the right bucket
		for (int i = 0; i < arr.length; i++){
			int index = (int) arr[i] * NUM_OF_BUCKETS;
			if (buckets.get(index) == null){
				ArrayList<Double> bucket = new ArrayList<Double>();
				bucket.add(arr[i]);
				buckets.set(index, bucket);
			} else {
				buckets.get(index).add(arr[i]);
			}
		}
		
		// sort bucket with insertion sort
		for (int j = 0; j < NUM_OF_BUCKETS; j++){
			if (buckets.get(j) != null){
				insersionSort(buckets.get(j));
			}
		}
		
		// concatenate buckets together in order, and copy back to arr
		int arr_index = 0;
		for (int j = 0; j < NUM_OF_BUCKETS; j++){
			ArrayList<Double> bucket = buckets.get(j);
			if (bucket != null){
				for(Double data : bucket){
					arr[arr_index] = data;
					arr_index++;
				}
			}
		}
	}
	
	private static void insersionSort(ArrayList<Double> array){
		for (int i = 1; i < array.size(); i++){
			double curr = array.get(i);
			int j = i;
			while (j > 0 && array.get(j - 1) > curr){
				array.set(j, array.get(j - 1));
				j--;
			}
			array.set(j, curr);
		}
	}

}